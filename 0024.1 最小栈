设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。

push(x) -- 将元素 x 推入栈中。
pop() -- 删除栈顶的元素。
top() -- 获取栈顶元素。
getMin() -- 检索栈中的最小元素。
示例:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.getMin();   --> 返回 -2.


利用LinkedList来解决该题，对于添加方法，将数据进行添加然后比较对应的是否是最小值即可判断结果；
对于弹出方法，显示判断最顶上的值是否为最小值，如果是的话需要重新找到一个最小值，如果不是的话直接进行链表元素删除即可
取出最顶上的元素，通过get方法得到；
取出最小值，直接返回最小元素即可，如果是弹出的话他会重新找到新的最小值，所以不用担心最小值没有出现的问题；

class MinStack {
    List<Integer> list = new LinkedList<Integer>();
    int minNum = Integer.MAX_VALUE;
    /** initialize your data structure here. */
    public MinStack() {
        
    }
    
    public void push(int x) {
        list.add(x);
        if(x<minNum){
            minNum = x;
        }
    }
    
    public void pop() {
        if(minNum == list.get(list.size()-1)){
            minNum = Integer.MAX_VALUE;
            for(int i=0;i<list.size()-1;i++){
                if(list.get(i)<minNum){
                    minNum = list.get(i); 
                }
            }            
        }
        if(list.size()!=0){
            list.remove(list.size()-1);
        }
    }
    
    public int top() {
        return list.get(list.size()-1);
    }
    
    public int getMin() {
        return minNum;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
