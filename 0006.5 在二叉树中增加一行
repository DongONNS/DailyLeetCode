给定一个二叉树，根节点为第1层，深度为 1。在其第 d 层追加一行值为 v 的节点。
添加规则：给定一个深度值 d （正整数），针对深度为 d-1 层的每一非空节点 N，为 N 创建两个值为 v 的左子树和右子树。
将 N 原先的左子树，连接为新节点 v 的左子树；将 N 原先的右子树，连接为新节点 v 的右子树。
如果 d 的值为 1，深度 d - 1 不存在，则创建一个新的根节点 v，原先的整棵树将作为 v 的左子树。

示例 1:
输入: 
二叉树如下所示:
       4
     /   \
    2     6
   / \   / 
  3   1 5   
v = 1
d = 2

输出: 
       4
      / \
     1   1
    /     \
   2       6
  / \     / 
 3   1   5   

示例 2:
输入: 
二叉树如下所示:
      4
     /   
    2    
   / \   
  3   1    
v = 1
d = 3

输出: 
      4
     /   
    2
   / \    
  1   1
 /     \  
3       1



class Solution {
    public TreeNode addOneRow(TreeNode root, int v, int d) {
        if(d == 1){
            TreeNode node = new TreeNode(v);
            node.left = root;
            return node;
        }
        dfs(root,v,d,1);
        return root;
    }
    public void dfs(TreeNode node,int v,int d,int level){
        if(node == null)    return;
        if(level == d-1){
            //保存原d层节点
            TreeNode left = node.left;  
            TreeNode right = node.right;
            ／／创建新d层节点
            TreeNode newLeft = new TreeNode(v);
            TreeNode newRight = new TreeNode(v);
            ／/将原d层节点放置到新d层节点下
            node.left = newLeft;
            node.right = newRight;
            newLeft.left = left;
            newLeft.right = null;
            newRight.right = right;
            newRight.left = null;
            return;
        }else{
            dfs(node.left,v,d,level+1);
            dfs(node.right,v,d,level+1);
        }
        return;
    }
}
