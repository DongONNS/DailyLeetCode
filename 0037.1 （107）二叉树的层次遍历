给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层次遍历为：

[
  [15,7],
  [9,20],
  [3]
]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        DFS(root,0,ans);
        Collections.reverse(ans);
        return ans;
    }
    private void DFS(TreeNode root,int level,List<List<Integer>> ans){
        if(root==null){
            return;
        }
        //当前层数还没有元素，先new一个空的列表
        if(ans.size()<=level){
            ans.add(new ArrayList<>());
        }
        ans.get(level).add(root.val);
        
        DFS(root.left,level+1,ans);
        DFS(root.right,level+1,ans);
    }
}
