给定一个二叉树，它的每个结点都存放着一个整数值。

找出路径和等于给定数值的路径总数。

路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。

二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。

示例：

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

返回 3。和等于 8 的路径有:

1.  5 -> 3
2.  5 -> 2 -> 1
3.  -3 -> 11


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int pathSum(TreeNode root, int sum) {
        
        if(root == null){
            return 0;
        }
        
        return paths(root,sum)
               +pathSum(root.left,sum)
               +pathSum(root.right,sum);
    }
    
    private static int paths(TreeNode root,int sum){
        
        if(root == null){
            return 0;
        }
        int res = 0;
        if(root.val==sum){
            res += 1;
        }
        res+=paths(root.left,sum-root.val);
        res+=paths(root.right,sum-root.val);
        return res;
    }  
}

这道题中的路径可以既不是从根节点出发，也不需要在叶子节点结束，可以先考虑从根绝点出发然后得到sum值得路径有哪些，
再考虑不从根节点出发得到路径的方式有哪些，这种题一般的思路就是考虑递归 这里用了两处递归，一个是从一个节点出发找到从该节点开始的所有路径，
递归找到所有结点的方法，最终得到所有的结果；

一定要记得多多温习学过的这些东西；



